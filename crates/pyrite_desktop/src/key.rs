use pyrite_input::keyboard::Key;
use winit::keyboard::KeyCode as WinitKeyCode;

pub(crate) fn to_pyrite_key(code: WinitKeyCode) -> Option<Key> {
    match code {
        WinitKeyCode::KeyA => Some(Key::A),
        WinitKeyCode::KeyB => Some(Key::B),
        WinitKeyCode::KeyC => Some(Key::C),
        WinitKeyCode::KeyD => Some(Key::D),
        WinitKeyCode::KeyE => Some(Key::E),
        WinitKeyCode::KeyF => Some(Key::F),
        WinitKeyCode::KeyG => Some(Key::G),
        WinitKeyCode::KeyH => Some(Key::H),
        WinitKeyCode::KeyI => Some(Key::I),
        WinitKeyCode::KeyJ => Some(Key::J),
        WinitKeyCode::KeyK => Some(Key::K),
        WinitKeyCode::KeyL => Some(Key::L),
        WinitKeyCode::KeyM => Some(Key::M),
        WinitKeyCode::KeyN => Some(Key::N),
        WinitKeyCode::KeyO => Some(Key::O),
        WinitKeyCode::KeyP => Some(Key::P),
        WinitKeyCode::KeyQ => Some(Key::Q),
        WinitKeyCode::KeyR => Some(Key::R),
        WinitKeyCode::KeyS => Some(Key::S),
        WinitKeyCode::KeyT => Some(Key::T),
        WinitKeyCode::KeyU => Some(Key::U),
        WinitKeyCode::KeyV => Some(Key::V),
        WinitKeyCode::KeyW => Some(Key::W),
        WinitKeyCode::KeyX => Some(Key::X),
        WinitKeyCode::KeyY => Some(Key::Y),
        WinitKeyCode::KeyZ => Some(Key::Z),
        WinitKeyCode::Escape => Some(Key::Escape),
        WinitKeyCode::F1 => Some(Key::F1),
        WinitKeyCode::F2 => Some(Key::F2),
        WinitKeyCode::F3 => Some(Key::F3),
        WinitKeyCode::F4 => Some(Key::F4),
        WinitKeyCode::F5 => Some(Key::F5),
        WinitKeyCode::F6 => Some(Key::F6),
        WinitKeyCode::F7 => Some(Key::F7),
        WinitKeyCode::F8 => Some(Key::F8),
        WinitKeyCode::F9 => Some(Key::F9),
        WinitKeyCode::F10 => Some(Key::F10),
        WinitKeyCode::F11 => Some(Key::F11),
        WinitKeyCode::F12 => Some(Key::F12),
        WinitKeyCode::Period => Some(Key::Period),
        WinitKeyCode::Comma => Some(Key::Comma),
        WinitKeyCode::Slash => Some(Key::Slash),
        WinitKeyCode::Backslash => Some(Key::Backslash),
        WinitKeyCode::Quote => Some(Key::Quote),
        WinitKeyCode::Semicolon => Some(Key::Semicolon),
        WinitKeyCode::Minus => Some(Key::Hyphen),
        WinitKeyCode::Equal => Some(Key::Equal),
        WinitKeyCode::BracketLeft => Some(Key::LBracket),
        WinitKeyCode::BracketRight => Some(Key::RBracket),
        WinitKeyCode::Backspace => Some(Key::Backspace),
        WinitKeyCode::Tab => Some(Key::Tab),
        WinitKeyCode::Enter => Some(Key::Enter),
        WinitKeyCode::Space => Some(Key::Space),
        WinitKeyCode::Insert => Some(Key::Insert),
        WinitKeyCode::Delete => Some(Key::Delete),
        WinitKeyCode::Home => Some(Key::Home),
        WinitKeyCode::End => Some(Key::End),
        WinitKeyCode::PageUp => Some(Key::PageUp),
        WinitKeyCode::PageDown => Some(Key::PageDown),
        WinitKeyCode::ArrowLeft => Some(Key::Left),
        WinitKeyCode::ArrowRight => Some(Key::Right),
        WinitKeyCode::ArrowUp => Some(Key::Up),
        WinitKeyCode::ArrowDown => Some(Key::Down),
        WinitKeyCode::ShiftLeft => Some(Key::LShift),
        WinitKeyCode::ShiftRight => Some(Key::RShift),
        WinitKeyCode::ControlLeft => Some(Key::LControl),
        WinitKeyCode::ControlRight => Some(Key::RControl),
        WinitKeyCode::AltLeft => Some(Key::LAlt),
        WinitKeyCode::AltRight => Some(Key::RAlt),
        _ => None,
    }
}
